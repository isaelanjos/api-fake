# Isael Anjos
# Dockerfile to Laravel and Lumen (tests)
# Note: This dockerfile it's only example to testing applications and not should use on staging or production environment.
#       The commented lines are for easily repair or modification file.

# From PHP
FROM php:7.1-fpm

# Define workdir
WORKDIR /app

# Copy app files
COPY ./ /app

# Install packages and extensions, add bellow your packages and extensions to install
# RUN apt-get update && apt-get install -y \
# curl \
#     # freetype-dev \
#     iputils-ping \
#     # libbz2 \
#     libcurl4-gnutls-dev \
#     libfreetype6-dev \
#     libicu-dev \
#     # libjpeg-turbo-dev \
#     libjpeg62-turbo-dev \
#     libmcrypt-dev \
#     libmcrypt4 \
#     libmemcached11 \
#     libpng-dev \
#     # libpng12-dev \
#     libssl-dev \
#     libxml2-dev \
#     libxslt-dev \
#     make \
#     # openldap-dev \
#     openssh-server \
#     openssl \
#     # rar \
#     tree \
#     # unrar \
#     unzip \
#     vim \
#     wget \
#     zip
RUN apt-get update && apt-get install -y curl git zip unzip

# PHP Extensions (Laravel Requeriments)
# https://laravel.com/docs/5.6/installation
# PHP >= 7.1.3
# OpenSSL PHP Extension
# PDO PHP Extension
# Mbstring PHP Extension
# Tokenizer PHP Extension
# XML PHP Extension
# Ctype PHP Extension
# JSON PHP Extension

# Install php dependencies using docker-ext
# RUN docker-php-ext-install bcmath json mbstring opcache pcntl pdo pdo_mysql soap

# Install php dependencies using pecl
# RUN pecl install mongodb redis xdebug
# RUN docker-php-ext-enable mongodb redis xdebug

# Setting the PHP configurations, uncomment bellow lines or add a volume in your docker-compose.yml './php/conf:/usr/local/etc/php/conf'
# RUN echo "memory_limit=-1" > $PHP_INI_DIR/conf.d/memory-limit.ini
# RUN echo "date.timezone=${PHP_TIMEZONE:-UTC}" > $PHP_INI_DIR/conf.d/date_timezone.ini

# Install cron and supervisor (extra: htop)
# RUN apt-get update && apt-get install cron supervisor htop -y

# Register the COMPOSER_HOME environment variable
ENV COMPOSER_HOME /composer

# Add global binary directory to PATH and make sure to re-export it
ENV PATH /composer/vendor/bin:$PATH

# Allow Composer to be run as root
ENV COMPOSER_ALLOW_SUPERUSER 1

# Setup the Composer installer
RUN curl -o /tmp/composer-setup.php https://getcomposer.org/installer \
&& curl -o /tmp/composer-setup.sig https://composer.github.io/installer.sig \
&& php -r " if (hash_file('sha384', '/tmp/composer-setup.php') === trim(file_get_contents('/tmp/composer-setup.sig'))) { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); echo PHP_EOL; exit(1); }"
RUN php /tmp/composer-setup.php --install-dir=/usr/local/bin --filename=composer
RUN php -r "unlink('/tmp/composer-setup.php');"

# Resolve executable problem
RUN chmod +x /usr/local/bin/composer

# Run composer install
RUN composer install

# Copy entrypoint
COPY ./docker/entrypoint.sh /

# Expose php port
EXPOSE 9000

# Set entrypoint
ENTRYPOINT /entrypoint.sh
